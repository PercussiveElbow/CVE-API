require "xml"
require "json"
require "http/client"
require "compress/zip"
require "db"
require "pg"
require "uuid"
require "./parser/nvd_schemas"


def parse_mitre_cvrf(file_loc : String = "allitems-cvrf.xml")
    puts("Reading file #{file_loc}")
    content = File.read(file_loc)
    puts("Parsing XML")
    nodes = XML.parse(content)
    namespaces = { "cvrf" => "http://www.icasi.org/CVRF/schema/cvrf/1.1","vuln" => "http://www.icasi.org/CVRF/schema/vuln/1.1"}

    if nodes 
        vulns = nodes.xpath_nodes("/cvrf:cvrfdoc/vuln:Vulnerability", namespaces: namespaces)
        if vulns
            puts("Loaded: " + vulns.size().to_s + " vulns.")
            vulns.each do | vuln | 
                title = vuln.xpath_node("vuln:Title", namespaces: namespaces)
                description = vuln.xpath_node("vuln:Notes/vuln:Note[@Type='Description']", namespaces: namespaces)
                published = vuln.xpath_node("vuln:Notes/vuln:Note[@Title='Published']", namespaces: namespaces)
                modified = vuln.xpath_node("vuln:Notes/vuln:Note[@Title='Modified']", namespaces: namespaces)
                references = vuln.xpath_nodes("vuln:References/vuln:Reference", namespaces: namespaces)

                # puts(title.text) if title
                # puts(description.text) if description
                # puts(published.text) if published
                # puts(modified.text) if modified
                if references 
                    puts(references)
                end
            end
        end 
    end
    puts("Done parsing XML")
end

def download_nvd_zip(url)
    resp = HTTP::Client.get(url)
    if resp.status_code != 200
        raise Exception.new("Download failed")
    end
    io = IO::Memory.new(resp.body)

    cves = Array(CVENVDEntry).new()
    Compress::Zip::Reader.open(io) do |zip|
        zip.each_entry do |entry|
            puts ("Loading CVEs from #{url}")
            json_parsed = CVENVDFeed.from_json(entry.io.gets_to_end)
            cves += json_parsed.cve_items
        end
    end
    cves
end

def download_and_parse_nvd_zips()
    cves = Array(CVENVDEntry).new()
    (2002..2020).each do | i |
        download_url = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-#{i}.json.zip"
        puts("Downloading #{download_url}")
        cves += download_nvd_zip(download_url)
        puts("Total CVEs loaded: " + cves.size().to_s)
    end
    cves
end

def load_into_db(db_path, cves : Array(CVENVDEntry))
    fibers = 10
    puts("Loading CVEs into DB across #{fibers} fibers")
    elapsed_time = Time.measure do
        channel = Channel(Nil).new
        size_divided = (cves.size()/fibers).to_i
        cves.each_slice(size_divided) do | cve_chunk |
            spawn insert_chunk(channel, db_path, cve_chunk)
        end

        cves.size().times do
            channel.receive
        end
    end
    puts("Loading CVEs into DB took #{elapsed_time}")
end

def insert_chunk(channel, db_path, cves)
    DB.open db_path do |db|
        cves.each do |cve|
            begin
                db.exec "insert into cves values ($1, $2, $3)", UUID.random , cve.cve.cve_data_meta.id, cve.to_json 
                channel.send(nil)
            rescue
                channel.send(nil)
            end
        end
    end
end

def clear_and_setup_table(db_path)
    DB.open db_path do |db|
        puts("Dropping table")
        db.exec "DROP TABLE IF EXISTS cves;"
        puts("Creating table")
        db.exec "CREATE TABLE cves (id uuid PRIMARY KEY, cveid TEXT, cve_details JSON);"
        puts("Granting access")
        db.exec "grant all privileges on table cves to psql_user;"
    end
end

db_path = ENV["PG_PATH"]


if db_path
    clear_and_setup_table(db_path)
    cves = download_and_parse_nvd_zips()
    load_into_db(db_path, cves)
else 
    puts("Set PG_PATH env var. Format postgres://user:pass@host:port/db_name")
    exit(1)
end
# parse_mitre_cvrf("allitems-cvrf.xml")


# grant all privileges on database cve_db to psql_user;
# CREATE TABLE cves (id uuid PRIMARY KEY, cveid TEXT, cve_details JSON);
# grant all privileges on table cves to psql_user;